{"componentChunkName":"component---src-templates-blog-tsx","path":"/post/003-understand-type-guard-in-typescript","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Explicit and Implicit type conversions in JavaScript","date":"Nov, 5th 2020","tags":["javascript"],"author":"Tauqeer Nasir"},"html":"<p><img src=\"https://i.imgur.com/46JcyHs.png\"></p>\n<br />\n<p>In every programming language, we need to convert one type to some other type according to the problem we try to solve. In JavaScript, we can convert one type to another explicitly or JavaScript itself can convert a type to another according to the context of statement/expression.</p>\n<p>For example, <code class=\"language-text\">alert()</code> function implicitly converts any value provided to it into a <code class=\"language-text\">string</code> to display it in the dialog. Similarly mathetical operations convert values to <code class=\"language-text\">numbers</code>.</p>\n<p>But there are times, when we need to explicitly convert a value to some other type. Let's have a look at some basic of the type conversions below.</p>\n<h2>String Conversions</h2>\n<p>As I mentioned above, <code class=\"language-text\">alert()</code> will convert any value provided to it in a string type. But what if we want to covert some given value into string explicitly?</p>\n<p>We can use <code class=\"language-text\">String(value)</code> to convert a given value into a <code class=\"language-text\">string</code> type.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token comment\">// here we have a number type</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> value<span class=\"token punctuation\">)</span> <span class=\"token comment\">// number</span>\n\nvalue <span class=\"token operator\">=</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token comment\">// convert the given value into string, resulting into '2'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> value<span class=\"token punctuation\">)</span> <span class=\"token comment\">// string</span></code></pre></div>\n<blockquote>\n<p><code class=\"language-text\">typeof</code> can be used on any value to know it's type.</p>\n</blockquote>\n<p>You can pass different kind of values to <code class=\"language-text\">String()</code> to know how it works.</p>\n<h2>Numeric Conversions</h2>\n<p>Numeric conversions happen implicitly, when you pass values to methametical function or expressions. For example, when you have two string values, \"9\" and \"3\" and you use these values with a division operator \"/\".</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"9\"</span> <span class=\"token operator\">/</span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3</span></code></pre></div>\n<p>Sometimes, you need to convert string values into <code class=\"language-text\">Numbers</code> explicitly so that they could be passed to some functions expecting numbers as values. To explicitly convert a string value into number, you can use <code class=\"language-text\">Number(str)</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"321\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> str<span class=\"token punctuation\">)</span> <span class=\"token comment\">// string</span>\n\nstr <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"321\" => 321</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> str<span class=\"token punctuation\">)</span> <span class=\"token comment\">// number</span></code></pre></div>\n<blockquote>\n<p>Important: <code class=\"language-text\">Number()</code> does not always convert a string into valid number, if string does not contain valid number that can be converted from type <code class=\"language-text\">string</code> to type <code class=\"language-text\">number</code>.</p>\n</blockquote>\n<p>For example, converting a string <code class=\"language-text\">&quot;hello world&quot;</code> will result into <code class=\"language-text\">NaN</code> (Not a Number).</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> strToNumber <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>strToNumber<span class=\"token punctuation\">)</span> <span class=\"token comment\">// NaN</span></code></pre></div>\n<blockquote>\n<p>Attention: if you check the <code class=\"language-text\">typeof NaN</code>, you will see that it returns <code class=\"language-text\">number</code>.</p>\n</blockquote>\n<p>That being said, if you convert a string that doesn't convert to a <code class=\"language-text\">valid number</code>, and even if you check <code class=\"language-text\">typeof</code> of that converted value, and pass that to a function or expression with is expecting that value to be a valid number can produce unexpected result. Have a look at the following code snippet.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">add2</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> value <span class=\"token operator\">+</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> strToNumber <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>strToNumber<span class=\"token punctuation\">)</span> <span class=\"token comment\">// NaN</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> strToNumber <span class=\"token operator\">===</span> <span class=\"token string\">\"number\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">add2</span><span class=\"token punctuation\">(</span>strToNumber<span class=\"token punctuation\">)</span> <span class=\"token comment\">// bug, returns NaN</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>After converting <code class=\"language-text\">string</code> to a <code class=\"language-text\">number</code>, check if converted value is not a <code class=\"language-text\">NaN</code>.</p>\n</blockquote>\n<p>You can use <code class=\"language-text\">Number.isNaN(value)</code> to check if the converted value is <code class=\"language-text\">NaN</code> or not.</p>\n<p>Now the above code snippet can be like this.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">add2</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> value <span class=\"token operator\">+</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> strToNumber <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>strToNumber<span class=\"token punctuation\">)</span> <span class=\"token comment\">// NaN</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Number<span class=\"token punctuation\">.</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span>strToNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">add2</span><span class=\"token punctuation\">(</span>strToNumber<span class=\"token punctuation\">)</span> <span class=\"token comment\">// bug, returns NaN</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// throw or ignore</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<table>\n<thead>\n<tr>\n<th>TYPE</th>\n<th>CONVERTS TO</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>null</td>\n<td>0</td>\n</tr>\n<tr>\n<td>undefined</td>\n<td>NaN</td>\n</tr>\n<tr>\n<td>true</td>\n<td>1</td>\n</tr>\n<tr>\n<td>false</td>\n<td>0</td>\n</tr>\n<tr>\n<td>string</td>\n<td>It removes white spaces from start and end of the string, and rest of the string is converted into number. Empty string results into 0. Otherwise number will be extracted from the string. Any error will result into NaN.</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>Important: <code class=\"language-text\">undefined</code> converts to <code class=\"language-text\">NaN</code> whereas <code class=\"language-text\">null</code> converts to <code class=\"language-text\">0</code>.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" 100   \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 100</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// NaN, error while converting \"a\" to number</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2>Boolean Conversions</h2>\n<p>Converting value to <code class=\"language-text\">boolean</code> is simple. It happens automatically (implicitly) in logical operations and can also be converted explicitly using <code class=\"language-text\">Bolean(value)</code>.</p>\n<table>\n<thead>\n<tr>\n<th>VALUE</th>\n<th>CONVERTS TO</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0, undefined, null, an empty string and NaN</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Any other value</td>\n<td>true</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>Note: <code class=\"language-text\">&quot;0&quot;</code> becomes <code class=\"language-text\">true</code> when converting to <code class=\"language-text\">boolean</code>, because <code class=\"language-text\">Boolean()</code> treats non-empty strings as <code class=\"language-text\">truthy</code>.</p>\n</blockquote>\n<p>That's it for now. We will cover <code class=\"language-text\">objects</code> to premitive conversions in a future post.</p>"}},"pageContext":{"slug":"003-understand-type-guard-in-typescript"}},"staticQueryHashes":["3649515864","63159454"]}