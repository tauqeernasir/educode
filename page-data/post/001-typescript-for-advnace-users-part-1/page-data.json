{"componentChunkName":"component---src-templates-blog-tsx","path":"/post/001-typescript-for-advnace-users-part-1","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Typescript for advance users - Part 1","date":"Mar, 25th 2020","tags":["typescript"],"author":"Tauqeer Nasir"},"html":"<p><img src=\"https://i.imgur.com/RqMBQH6.png\"></p>\n<p>In this series, we are going to learn about <em>advance features of Typescript</em>. When you develop an application using Typescript, the code base can get more complex with the addition of new application features, so do the types required to describe it.\nThere are a number of basic and some advance built-in types that be used for such purpose or combined to create more complex and specialized types.</p>\n<blockquote>\n<p>This post is meant for developers who are already familiar with Typescript. If you want to learn the very basics of Typescript, please read official docs <a href=\"https://www.typescriptlang.org/docs/home.html\"><code class=\"language-text\">here</code></a></p>\n</blockquote>\n<p>In this article, we will have a look at following types:</p>\n<ul>\n<li>Partial</li>\n<li>Required</li>\n<li>Record</li>\n<li>Readonly</li>\n<li><del>Extract</del></li>\n<li><del>Exclude</del></li>\n<li><del>Pick</del></li>\n<li><del>Omit</del></li>\n<li><del>Difference</del></li>\n<li><del>Intersection</del></li>\n</ul>\n<p>Without further ado, let's have a look at what these types are and how we can them in our applications.</p>\n<h2>Partial - Generic Type</h2>\n<p><em>Partial generic type takes a single argument of an object type (interface), and returns a new type where all the properties of the object are defined as optional.</em>\n<br /><br />\nlet's say, you have an interface defined for a user as follow.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IUser</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  email<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n  phone<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>With <code class=\"language-text\">Partial</code> type, Typescript will interpret <code class=\"language-text\">User</code> to have all properties as optional.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">NewUserType</span> <span class=\"token operator\">=</span> Partial<span class=\"token operator\">&lt;</span>IUser<span class=\"token operator\">></span>\n\n<span class=\"token comment\">// After using Partial type, NewUserType will have following interface</span>\n<span class=\"token comment\">// without explicitly defining all properties as optional</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">NewUserType</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  email<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  age<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n  phone<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><br /><br /></p>\n<h2>Required - Generic Type</h2>\n<p><em>Required generic type also takes a single argument of an object type and returns a new type where all the properties are defined as required. This works opposite to <code class=\"language-text\">Parital</code> type.</em>\n<br /><br /></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IUserAddress</span> <span class=\"token punctuation\">{</span>\n  street<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  zip<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  city<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  country<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">DeliveryAddress</span> <span class=\"token operator\">=</span> Required<span class=\"token operator\">&lt;</span>IUserAddress<span class=\"token operator\">></span></code></pre></div>\n<p>The above <code class=\"language-text\">DeliveryAddress</code> type will be interpreted by Typescript as follow:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">DeliveryAddress</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  street<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  zip<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  city<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  country<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><br /><br /></p>\n<h2>Record - Generic Type</h2>\n<p><em>Record generic type is a little different, it take two arguments. It allows you to assign a map (object) with the mentioned <code class=\"language-text\">key</code> type and <code class=\"language-text\">value</code> type.</em>\n<br /><br />\nHave a look at the following code:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Address</span> <span class=\"token operator\">=</span> Record<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span></code></pre></div>\n<p>Now, <code class=\"language-text\">Address</code> type will allow you to have an object with <code class=\"language-text\">key</code> of type <code class=\"language-text\">string</code> and <code class=\"language-text\">value</code> of type <code class=\"language-text\">string</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Address</span> <span class=\"token operator\">=</span> Record<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span>\n\n<span class=\"token keyword\">const</span> deliveryAddress<span class=\"token operator\">:</span> Address <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  street<span class=\"token operator\">:</span> <span class=\"token string\">\"street address\"</span><span class=\"token punctuation\">,</span>\n  zip<span class=\"token operator\">:</span> <span class=\"token string\">\"123\"</span><span class=\"token punctuation\">,</span>\n  city<span class=\"token operator\">:</span> <span class=\"token string\">\"lahore\"</span><span class=\"token punctuation\">,</span>\n  country<span class=\"token operator\">:</span> <span class=\"token string\">\"pakistan\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><br /><br /></p>\n<p>We can also pass <code class=\"language-text\">type literals</code> and use <code class=\"language-text\">union</code> to be more specific.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// Restrict properties to have only mentioned keys</span>\n<span class=\"token comment\">// But value can be any string</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Address</span> <span class=\"token operator\">=</span> Record<span class=\"token operator\">&lt;</span><span class=\"token string\">\"street\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"zip\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"city\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"country\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span></code></pre></div>\n<p>Now Typescript will expand the above type as follow:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Address</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  street<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  zip<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  city<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  country<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><br /><br /></p>\n<p>We can get a little more creative and use <code class=\"language-text\">Partial</code> type to make all properties optional.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Address</span> <span class=\"token operator\">=</span> Partial<span class=\"token operator\">&lt;</span>Record<span class=\"token operator\">&lt;</span><span class=\"token string\">\"street\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"zip\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"city\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"country\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token operator\">>></span></code></pre></div>\n<p>Now Typescript will expand the above type as follow:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Address</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  street<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  zip<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  city<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  country<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><br /><br /></p>\n<p>Furthermore, we can make use of <code class=\"language-text\">intersection (&amp;) type</code> to have multiple kind of <code class=\"language-text\">value</code> types.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">User</span> <span class=\"token operator\">=</span> Record<span class=\"token operator\">&lt;</span><span class=\"token string\">\"name\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"email\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> Record<span class=\"token operator\">&lt;</span><span class=\"token string\">\"height\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token operator\">></span></code></pre></div>\n<p>Typescript will expand the above type as follow:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">User</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  email<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  height<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><br /><br /></p>\n<h2>Readonly - Generic Type</h2>\n<p><em>Readonly generic type takes one argument of an object and returns a new type by marking all properties as <code class=\"language-text\">readonly</code>. Which means you cannot modify the values of an object with that type.</em></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">ICar</span> <span class=\"token punctuation\">{</span>\n  model<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  make<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  seats<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n  color<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Car</span> <span class=\"token operator\">=</span> Readonly<span class=\"token operator\">&lt;</span>ICar<span class=\"token operator\">></span></code></pre></div>\n<p>Using <code class=\"language-text\">Readonly</code> type we can get a new type:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Cat</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">readonly</span> model<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  <span class=\"token keyword\">readonly</span> make<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  <span class=\"token keyword\">readonly</span> seats<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n  <span class=\"token keyword\">readonly</span> color<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><br /><br /></p>\n<p><em><code class=\"language-text\">Partial&lt;&gt;</code>, <code class=\"language-text\">Required&lt;&gt;</code>, <code class=\"language-text\">Record&lt;&gt;</code>, <code class=\"language-text\">Readonly&lt;&gt;</code></em> can be used in combination to create new complex and specialized types.</p>\n<p>In next post, we will cover remaining types and will learn how and when we should use them to write better types for our applications.</p>\n<p>If you have any question or suggestion, please comment below.</p>\n<p>If you liked reading this article, make sure to subscribe to our newsletter to stay up-to-date with the latest content.</p>"}},"pageContext":{"slug":"001-typescript-for-advnace-users-part-1"}},"staticQueryHashes":["3649515864","63159454"]}